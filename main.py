import os
import dotenv
import random
import telebot

from telebot import types
from database.db_connection import DBConnection
from database.models import create_tables, User, UserWord, Word
from sqlalchemy import func
from command import Command
from states import States
from translate import Translator


dotenv.load_dotenv()
bot_token = os.getenv('TOKEN')

bot = telebot.TeleBot(bot_token)

@bot.message_handler(commands=['start'])
def start(message):
    telegram_user_id = message.chat.id

    if not session.query(User).filter(User.telegram_id == telegram_user_id).first():
        user = User(telegram_id=telegram_user_id)
        session.add(user)
        session.commit()

        for i in range(1, 11):
            userword = UserWord(user_id=user.id, word_id=i)
            session.add(userword)

        session.commit()
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
    else:
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")


@bot.message_handler(commands=['train'])
def train(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)

    random_userword_word_id = session.query(UserWord.word_id).order_by(func.random()).first()[0]

    russian_word = session.query(Word.word_rus).where(Word.id == random_userword_word_id).first()[0]
    target_word = session.query(Word.word_eng).where(Word.id == random_userword_word_id).first()[0]

    target_word_btn = types.KeyboardButton(target_word)

    other_wrong_words = session.query(Word.word_eng).where(Word.id != random_userword_word_id).order_by(func.random()).all()[:3]
    other_wrong_words_buttons = [types.KeyboardButton(word[0]) for word in other_wrong_words]

    buttons = other_wrong_words_buttons + [target_word_btn]
    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    bot.send_message(message.chat.id, f'–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É —Å–ª–æ–≤–∞:\n{russian_word}', reply_markup=markup)
    bot.set_state(message.from_user.id, States.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['russian_word'] = russian_word
        data['other_words'] = other_wrong_words


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å')
    bot.register_next_step_handler(message, add_word_to_db)

def add_word_to_db(message):
    kb = types.InlineKeyboardMarkup(row_width=1)
    yes_btn = types.InlineKeyboardButton(text='–î–∞', callback_data='yes_btn')
    no_btn = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no_btn')
    kb.add(yes_btn, no_btn)

    translator = Translator(from_lang="en", to_lang="ru")

    word_eng = message.text.lower().capitalize()
    word_rus = translator.translate(word_eng)

    if word_eng != word_rus:
        bot.send_message(message.chat.id, f'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ {word_eng} -> {word_rus}?', reply_markup=kb)
        bot.set_state(message.from_user.id, States.word_eng, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['word_eng'] = word_eng
            data['word_rus'] = word_rus
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ...")

@bot.callback_query_handler(func=lambda callback: callback.data)
def check_callback_data(callback):
    if callback.data == "yes_btn":
        with bot.retrieve_data(callback.from_user.id, callback.from_user.id) as data:
            word_eng = data['word_eng']
            word_rus = data['word_rus']

        check_word = session.query(Word).filter(Word.word_eng == word_eng).all()

        if not check_word:
            word = Word(word_eng=word_eng, word_rus=word_rus)
            session.add(word)
            session.commit()

            userword = UserWord(user_id=callback.from_user.id, word_id=word.id)
            session.add(userword)
            session.commit()
            bot.send_message(f"–°–ª–æ–≤–æ {word_eng} -> {word_rus} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à—É –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_word(message):
    train(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
        russian_word = data.get('russian_word')

    if message.text == target_word:
        bot.send_message(message.chat.id, f"–í—Å—ë –≤–µ—Ä–Ω–æ!\n{target_word} -> {russian_word}")
    else:
        bot.send_message(message.chat.id, f"–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π!\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {target_word}")


if __name__ == '__main__':
    db = DBConnection()
    engine = db.create_engine()
    session = db.create_session(engine)

    create_tables(engine)
    db.add_test_data(session=session, Word=Word)

    bot.polling()
    session.close()